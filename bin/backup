#!/usr/bin/env bash
# https://betterdev.blog/minimal-safe-bash-script-template/
# set -Eeuo pipefail

# https://arstechnica.com/gadgets/2021/06/a-quick-start-guide-to-openzfs-native-encryption/

script_dir=$(cd $(dirname "${BASH_SOURCE[0]}") &>/dev/null && pwd -P)

filter_dir="${script_dir}/../filter"
filter_conf="${script_dir}/../etc/filter.rc"
# Obsolete, use /Volumes/${volume}/${USER}
# target_dir="${script_dir}/../target"

## LOG
function logger() {
  local level=${1:-"INFO"}
  shift
  local message=$*
  local timestamp=$(date -u +"%Y-%m-%dT%H:%M:%S")
  local module=$(basename ${BASH_SOURCE[0]})
  if [ ${_debug:-0} -eq 0 ] && [ "${level}" = "DEBUG" ]; then
    return
  fi
  printf "%-9s%-18s %-16s %s\n" $level $timestamp "$module" "$message"
}

function check_versions() {
  echo -e "\nZFS Version:"
  zpool --version
  # zfs --version
  echo -e "\nRsync Version:"
  rsync --version
  echo -e "\nFilter Version:"
  rofs-filtered -V
}

function check() {
  zpool --version &> /dev/null
  if [ $? -gt 0 ] ; then
    logger ERROR "Command zpool not found"
    exit 1
  fi

  zfs --version &> /dev/null
  if [ $? -gt 0 ] ; then
    logger ERROR "Command zfs not found"
    exit 1
  fi

  rsync --version &> /dev/null
  if [ $? -gt 0 ] ; then
    logger ERROR "Command rsync not found"
    exit 1
  fi

  rofs-filtered -V &> /dev/null
  if [ $? -gt 0 ] ; then
    logger ERROR "Command rofs-filtered not found (Try: brew install macfuse)."
    exit 1
  fi

  # dirs
  if [ ! -d "${filter_dir}" ] ; then
    mkdir -p "${filter_dir}"
  fi

  # if [ ! -d "${target_dir}" ] ; then
  #   mkdir -p "${target_dir}"
  # fi

  # # configs
  # if [ ! -r "${filter_conf}" ] ; then
  #   logger ERROR "Config not found: ${filter_conf}"
  #   exit 1
  # fi

  logger INFO "System check OK"
}


## USAGE
function usage() {
  cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [options] command arg1 [arg2...]

Simple \$HOME directory backup script for OSX. 

Available options:

-h, --help          Print this help and exit
-v, --verbose       Run in verbose mode
    --dry-run       Dry run rsync

Available commands:

a, avail            List available zpools
p, pools            List imported zpools
i, import <pool>    Import zpool <pool>
e, export <pool>    Export zpool <pool>
v, vols             List volumes with encryption state info
o, open <vol>       Decrypt and mount volume <vol> 
c, close <vol>      Umount volume <vol> and unload encryption key
s, rsync <vol>      Start rsync of volume <vol> from filter to target directory
f, full <pool>      Full backup: mount, filter, sync, umount (<vol>=<pool>/backup)
r, remount_filter   Remount filter directory
mount_filter        Mount filter directory
umount_filter       Umount filter directory
version             Show program versions

How to prepare the backup drive:

On the zpool create an encrypted volume 'backup' and create a directory inside 
with your username (\$USER). Place the hidden file .mounted inside:
  mkdir -p <vol>/backup/\$USER
  touch <vol>/backup/\$USER/.mounted

How to make a backup:

  $(basename "${BASH_SOURCE[0]}") f <vol>

EOF
  exit
}

function cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
  echo "[${BASH_SOURCE[0]}] Cleanup finished"
}

function setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

function msg() {
  echo >&2 -e "${1-}"
}

function die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

## VOLUMES
function show_volumes() {
  echo ""
  echo "Encryption status of the imported volumes:"
  zfs get -p encryption,keystatus,mountpoint
}

function open_volume() {
  local volume=${1}
  if [ -z "$volume" ] ; then
    logger ERROR "Please add a volume name, eg.: osxbackup open <volume>"
    exit 1
  fi

  echo -e "\nType password for sudo first if necessary, than for the volume."
  sudo zfs load-key ${volume}
  if [ $? -gt 0 ] ; then
    logger ERROR "Load volume password failed."
    exit 1
  fi
  sudo zfs mount ${volume}
  if [ $? -gt 0 ] ; then
    logger ERROR "Volume mount failed."
    exit 1
  fi
  logger INFO "Volume decrypted and mounted. Mountpoint: /Volumes/${volume}"
}

function close_volume() {
  local volume=${1}
  if [ -z "$volume" ] ; then
    logger ERROR "Please add a volume name, eg.: osxbackup close <volume>"
    exit 1
  fi

  echo -e "\nType password for sudo if necessary"
  sudo umount -f /Volumes/${volume}
  if [ $? -gt 0 ] ; then
    logger ERROR "Volume umount failed."
    exit 1
  fi
  sudo zfs unload-key ${volume}
  if [ $? -gt 0 ] ; then
    logger ERROR "Unload volume password failed."
    exit 1
  fi
  logger INFO "Volume unmounted."
}


## ZPOOLS
function show_available_zpools() {
  # https://docs.oracle.com/cd/E19253-01/819-5461/gazru/index.html
  echo -e "\nAvailable Storage Pools to Import (type password for sudo to continue):"
  sudo zpool import
}

function show_imported_zpools() {
  echo -e "\nImport Storage Pools (type password for sudo to continue):"
  sudo zpool list
}

function import_zpool() {
  local pool=${1}
  if [ -z "$pool" ] ; then
    logger ERROR "Please add an available pool name, eg.: osxbackup import <pool>"
    exit 1
  fi
  echo -e "\nImport Storage Pools (type password for sudo to continue):"
  sudo zpool import -f "$pool"
  if [ $? -gt 0 ] ; then
    logger ERROR "Zpool import error"
    exit 1
  fi
}

function export_zpool() {
  local pool=${1}
  if [ -z "$pool" ] ; then
    logger ERROR "Please add an imported pool name, eg.: osxbackup export <pool>"
    exit 1
  fi
  echo -e "\nExport Storage Pools (type password for sudo to continue):"
  sudo zpool export "$pool"
  if [ $? -gt 0 ] ; then
    logger ERROR "Zpool export error"
    exit 1
  fi
}

function set_new_password() {
  local volume=${1}

  if [ -z "$volume" ] ; then
    logger ERROR "Please add an imported volume name, eg.: osxbackup newpass <volume>"
    exit 1
  fi
  echo -e "\nSet new wrapping password (type password for sudo to continue):"
  sudo zfs change-key $volume
}

## FILTER
# "https://github.com/gburca/rofs-filtered"
function mount_filter() {
  # TODO: Optional $USER specific filter, default general

  if [ ! -r "${filter_conf}" ] ; then
    logger ERROR "Filter config not found: ${filter_conf}"
    exit 1
  fi

  if [ -d "${filter_dir}/Documents" ] ; then
    logger ERROR "Filter directory already mounted"
    exit 1
  fi

  rofs-filtered "${filter_dir}" -o ro -o source="$HOME" -o config="${filter_conf}"
  if [ $? -gt 0 ] ; then
    logger ERROR "Mounting filter directory failed"
    exit 1
  fi

  logger INFO "Filter directory mounted: ${filter_dir}"
}

function umount_filter() {
  if [ ! -d "${filter_dir}/Documents" ] ; then
    logger ERROR "Filter directory is not mounted"
    exit 1
  fi
  umount "${filter_dir}"
  if [ $? -gt 0 ] ; then
    logger ERROR "Umounting filter directory failed"
    exit 1
  fi

  logger INFO "Filter directory umounted: ${filter_dir}"
}

## RSYNC
function rsync_filter_target() {
  local volume=${1}
  local dryrun=${2:-no}
  local verbose=${3:-no}

  if [ -z "$volume" ] ; then
    logger ERROR "Please add an imported volume name, eg.: osxbackup rsync <volume>"
    exit 1
  fi

  if [ -z "${filter_dir}" ] || [ ! -d "${filter_dir}/Documents" ] ; then
    logger ERROR "Filter directory is not mounted: ${filter_dir}"
    exit 1
  fi

  if [ ! -d "/Volumes/${volume}" ] ; then
    logger ERROR "Target directory is not mounted: /Volumes/${volume}"
    exit 1
  fi

  local target_dir=/Volumes/${volume}/$USER
  if [ ! -r "${target_dir}/.mounted" ] ; then
    logger ERROR "Target directory is not mounted: ${target_dir}"
    exit 1
  fi

  local opts="--info=progress2 --stats" # --progress
  if [ "$dryrun" == "yes" ] ; then
    opts="$opts --dry-run"
  fi

  if [ "$verbose" == "yes" ] ; then
    opts="-v $opts"
  fi
  # chmod -R u+w ${TARGET}/VPN
  echo ""
  read -p "Run Command: rsync -ah $opts ${filter_dir}/* ${target_dir}/ ? (Press ENTER to continue or Ctrl+C to abort)"
  echo ""
  date "+%Y-%m-%d %H:%M:%S %Z - Backup started" >> "${target_dir}/.mounted"
  rsync -ah $opts ${filter_dir}/* ${target_dir}/ 2> "${target_dir}/.rsync.err"
  date "+%Y-%m-%d %H:%M:%S %Z - Backup finished" >> "${target_dir}/.mounted"
}


## ARGUMENTS
function parse_params() {
  # default values of variables set from params
  # flag=0
  # param=''
  pool=''
  dryrun="no"
  verbose="no"

  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    -v | --verbose) verbose="yes";;
    --no-color) NO_COLOR=1 ;;
    --dry-run) dryrun="yes" ;; # example flag
    # -f | --flag) flag=1 ;; # example flag
    # -p | --param) # example named parameter
    #   param="${2-}"
    #   shift
    #   ;;


    ## BACKUP
    f | full)
      pool="${2-}"
      shift
      volume=${pool}/backup
      echo ""
      read -p "Do full back to $volume ? (Press ENTER to continue or Ctrl+C to abort)"
      import_zpool $pool
      sleep 1
      open_volume $volume
      sleep 1
      mount_filter
      sleep 1
      rsync_filter_target $volume $dryrun $verbose
      sleep 1
      umount_filter
      sleep 1
      close_volume $volume
      sleep 1
      export_zpool $pool
      echo ""
      echo "It is safe to remove the drive"
      echo ""
    ;;
  
    ## RSYNC
    s|rsync)
      volume="${2-}"
      shift
      rsync_filter_target $volume $dryrun $verbose
    ;;

    ## FILTER
    mount_filter)
      mount_filter
    ;;

    umount_filter)
      umount_filter
    ;;

    r|remount_filter)
      umount_filter
      sleep 1
      mount_filter
    ;;

    ## VOLUMES
    o|open)
      volume="${2-}"
      shift
      open_volume $volume
    ;;
    c|close)
      volume="${2-}"
      shift
      close_volume $volume
    ;;
    v|vols)
      show_volumes
    ;;

    ## ZPOOLS
    newpass)
      volume="${2-}"
      shift
      set_new_password $volume
    ;;
    a|avail)
      show_available_zpools
    ;;
    p|pools)
      show_imported_zpools
    ;;
    i|import)
      pool="${2-}"
      shift
      import_zpool $pool
    ;;
    e|export)
      pool="${2-}"
      shift
      export_zpool $pool
    ;;
    versions)
      check_versions
    ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
    shift
  done

  args=("$@")

  # check required params and arguments
  # [[ -z "${param-}" ]] && die "Missing required parameter: param"
  # [[ ${#args[@]} -eq 0 ]] && die "Missing script arguments"

  return 0
}

## MAIN
function main() {
  check
  parse_params "$@"
  setup_colors

  # # script logic here
  # msg "${RED}Read parameters:${NOFORMAT}"
  # msg "- flag: ${flag}"
  # msg "- param: ${param}"
  # msg "- arguments: ${args[*]-}"
}

##
if [ "${BASH_SOURCE[0]}" != "$0" ] ; then
  logger INFO "Script loaded"
else
  # trap cleanup SIGINT SIGTERM ERR EXIT
  main $@
fi
